package homework5;

import java.io.IOException;

import umontreal.iro.lecuyer.stat.*;
import umontreal.iro.lecuyer.util.PrintfFormat;

/*
 * We want to use proportional stratification
 * which means using the following vector of proportions
 * { 0.25, 0.55, 0.15, 0.05 } of the values { 0.8, 1.0, 1.2, 1.4 }
 * e.g.
 * 
 * if we make 1000 experiments,
 * 		0.8 -> 250
 * 		1.0 -> 550
 * 		1.2 -> 150
 * 		1.4 ->  50
 * 
 */



public class ex2 {

	   // To simplify the writing in the code.
	   public static void println (String s) {
	      System.out.println (s);
	   }
	   private static void println () {
	      System.out.println ();
	   }
	   private static String f (double x) {
	      return PrintfFormat.f (9, 3, x);
	   }
	
	   
	   
	   public static void runAndJump(CallCenterDisc a, CallCenterDisc b, double B_i, Tally diff) throws Error
	   {
		   // 1 - ascertain that the generators of both a and b are synchronized
		   // 2 - run a day for both
		   // 3 - jump to next substream in both RNGs
			double[] genAOutput = a.outputRNG();
			double[] genBOutput = b.outputRNG();

			for (int j = 0; j < genAOutput.length; j++)
				if (genAOutput[j] != genBOutput[j])
					throw new Error("RNGs are not well synchronized");
			
	   
	   		a.simulateOneDay(B_i, true, true);
	   		b.simulateOneDay(B_i, true, true);
	   		
	   		a.jumpRNG(1);
	   		b.jumpRNG(1);
		   
	   }
	   
	   
	   
	   
	public static void simulateStratifiedCRN(double delta,
											 int numPilotRuns,
											 int numRuns) throws IOException
	{
		
		// initialize the variables
		double[] b = new double[] { 0.8, 1.0, 1.2, 1.4 };
		double[] q = new double[] { 0.25, 0.55, 0.15, 0.05 };
		
		long[] seedA = new long[]{ 1, 12345, 12345, 12345, 12345, 12345 };
		long[] seedB = new long[]{ 2, 12345, 12345, 12345, 12345, 12345 };
		long[] seedP=  new long[]{ 3, 12345, 12345, 12345, 12345, 12345 };
		long[] seedS = new long[]{ 4, 12345, 12345, 12345, 12345, 12345 };
		
		// initialize simulators and tallies
		CallCenterDisc[] simulators = new CallCenterDisc[2];
		CallCenterDisc cc1 = simulators[0] = new CallCenterDisc("CallCenter.dat", b, q, 1.0/100.0);
		CallCenterDisc cc2 = simulators[1] = new CallCenterDisc("CallCenter.dat", b, q, (1.0 / (100. - delta)));
		
		TallyStore diffTally = new TallyStore("delta  = " + delta);
		
		
		// get and synchronize the generators
		for(int i =0 ; i< 2; i++)
		{
			simulators[i].getRNG1().setSeed(seedB);
			simulators[i].getRNG2().setSeed(seedA);
			simulators[i].getRNG3().setSeed(seedS);
			simulators[i].getRNG4().setSeed(seedP);
		}
		
		
		// make the pilot runs
		// X_c,i = X_i − β(A_i − a)
		

		// Initialize the internal tallies for the pilot runs
		for(CallCenterDisc c : simulators)
		{
			c.statArrivals.init();
			c.statWaits.init();
			c.statGoodQoS.init();
			c.statAbandon.init();
		}
		
		// stats to fill
		int k = cc1.b.length;
		double[] a = new double[k];
		double[] meanAp = new double[k];
		double[] varAp = new double[k];
		double[] meanXpilot = new double[k];
		double[] varXp = new double[k];
		double[] covarAXp = new double[k];
		double[] meanDp = new double[k];
		double[] varDp = new double[k];
		double[] covarADp = new double[k];
		double[] varCp = new double[k];
		double[] varCIp = new double[k];

		double[] betap = new double[k]; // beta fo direct est.
		double[] betaIp = new double[k]; // beta for indirect est.
		double[] sigma = new double[k]; // sigma for direct est.
		double[] sigmaI = new double[k]; // sigma for indirect.
		double[] sigmaC = new double[k]; // sigma for direct, with CV.
		double[] sigmaCI = new double[k]; // sigma for indirect, with CV.
		double[] sigmaBest = new double[k]; // smallest sigma, for given t.
		double sigmaT = 0.0; // Weighted sum of sigma[t]'s.
		double sigmaIT = 0.0;
		double sigmaCT = 0.0;
		double sigmaCIT = 0.0;
		double sigmaBestT = 0.0;
		double varProportional = 0.0; // Strat. with propor. sampling.
		double varProportionalC = 0.0; // Strat with propor. sampling + CV.

		
		

		
		// Pilot runs to estimate the variances and covariances for beta.
		// 
		for (int i = 0; i < numPilotRuns; i++) {
			// synchronize the generators
			for (CallCenterDisc c : simulators)
				c.jumpRNG(1);

			// check the synchronization of the generators
			double[] gen0Output = simulators[0].outputRNG();
			for (int i = 1; i < simulators.length; i++) {
				double[] genOutput = simulators[i].outputRNG();
				for (int j = 0; j < genOutput.length; j++)
					if (gen0Output[j] != genOutput[j])
						return false;
			}

			// simulate the day
			for (CallCenterDisc sim : simulators)
				sim.simulateOneDay(true, true);

			// System.out.println(simulators[0].nGoodQoS);
			for (int i = 0; i < delta.length - 1; i++) {
				// System.out.println(simulators[i+1].nGoodQoS);
				tallies[i].add(simulators[i + 1].nGoodQoS
						- simulators[0].nGoodQoS);
			}

		}


		
	}
	
	
	public ex2() {
		/*
		 * For the example of Section 6.2.2, implement a combination of the CRN
		 * methodology with the CV A_i and with stratification based on B_i ,
		 * with proportional allocation.
		 */
		
		/* PART 1: methodology with the CV A_i 
		 * 
		 * Total number of calls arriving on day i can be written as A_i
		 * 		A_i = X_i + D_i
		 * 		X_i is the number of calls under the time limit s
		 * 		D_i is the number of calls over  the time limit s (waited more than s or abandoned)
		 * 
		 * a = E[A_i] = 1660
		 * mu = E[X_i] = E[A_i - D_i] = a - E[D_i]
		 * 
		 * mu can be estimated as well by the indirect estimator
		 * 
		 * X^{-}_{i, n} = E[A_i] - D^{-}_n = a - 1/n sum(D_i)	
		 */
		
		
		
		
		
		
		/* PART 2: stratification based on B_i , with proportional allocation
		 * 
		 * 
		 * 
		 */

	}
		
		
	
	public static void main(String[] args) throws IOException
	{	
		double delta = 10.;
		int numPilotRuns = 10;
		int numRuns = 200;
		simulateStratifiedCRN(delta,
				 numPilotRuns,
				 numRuns);
	}

}
