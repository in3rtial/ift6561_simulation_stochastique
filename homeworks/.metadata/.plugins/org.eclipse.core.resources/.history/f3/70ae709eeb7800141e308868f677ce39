package homework5;

import umontreal.iro.lecuyer.rng.*;
import umontreal.iro.lecuyer.probdist.NormalDist;
import umontreal.iro.lecuyer.stat.Tally;

public class Asian {
	private double strikePrice;
	private int T; // Number of observation times.
	private double discount; // Discount factor exp(-r * zeta[t]).
	private double[] muDelta; // Differences * (r - sigma^2/2).
	private double[] sigmaSqrtDelta; // Square roots of differences * sigma.
	private double[] logS; // Log of the GBM process: logS[t] = log (S[t]).

	// Array zeta[0..s] must contain zeta[0]=0.0, plus the s observation times.

	/**
	 * constructor for AsianDelta option
	 * 
	 * @param shortRate
	 *            compound rate of bank account
	 * @param volatility
	 *            of the Standard Brownian Motion
	 * @param strikePrice
	 *            K, price agreed upon to buy the asset at time T
	 * @param initialPrice
	 *            initial price of the asset
	 * @param T
	 *            number of observation times
	 * @param observationTimes
	 */
	public Asian(double shortRate, double volatility, double strikePrice,
			double initialPrice, int T, double[] observationTimes) {
		this.strikePrice = strikePrice;
		this.T = T;
		discount = Math.exp(-shortRate * observationTimes[T]);
		double mu = shortRate - 0.5 * volatility * volatility;
		muDelta = new double[T];
		sigmaSqrtDelta = new double[T];
		logS = new double[T + 1];
		double delta;

		for (int j = 0; j < T; j++) {
			delta = observationTimes[j + 1] - observationTimes[j];
			muDelta[j] = mu * delta;
			sigmaSqrtDelta[j] = volatility * Math.sqrt(delta);
		}

		logS[0] = Math.log(initialPrice);
	}

	/**
	 * modifies the initial price for the calculation of the path by stochastic
	 * derivative
	 * 
	 * @param newInitialPrice
	 */
	public void changeInitialPrice(double newInitialPrice) {
		this.logS[0] = Math.log(newInitialPrice);
	}

	/**
	 * generate a GBM path with parameters from the stream
	 * 
	 * @param stream
	 */
	private void generatePath(RandomStream stream) {
		for (int j = 0; j < T; j++)
			logS[j + 1] = logS[j] + muDelta[j] + sigmaSqrtDelta[j]
					* NormalDist.inverseF01(stream.nextDouble());
	}

	/**
	 * generate a GBM path with parameters from a double[]Â (fixed)
	 * 
	 * @param fixedStream
	 */
	private void generatePath(double[] fixedStream) {
		assert fixedStream.length == T;
		for (int j = 0; j < T; j++)
			logS[j + 1] = logS[j] + muDelta[j] + sigmaSqrtDelta[j]
					* NormalDist.inverseF01(fixedStream[j]);
	}

	/**
	 * Computes and returns the discounted option payoff.
	 * 
	 * @return payoff of the option
	 */
	public double getPayoff() {
		double average = 0.0; // Average of the GBM process.
		for (int j = 1; j <= T; j++)
			average += Math.exp(logS[j]);
		average /= T;
		if (average > strikePrice)
			return discount * (average - strikePrice);
		else
			return 0.0;
	}

	/**
	 * Performs n independent runs.
	 * 
	 * @param n
	 *            number of runs
	 * @param stream
	 *            source of pseudo-random numbers
	 * @param statValue
	 *            statistics collector
	 */
	public void simulateRuns(int n, RandomStream stream, Tally statValue) {
		statValue.init();
		for (int i = 0; i < n; i++) {
			generatePath(stream);
			statValue.add(getPayoff());
			stream.resetNextSubstream();
		}
	}

	/**
	 * simulate the runs and reset the stream to the beginning of the current
	 * substream (no side effect unless we go out of the current substream, but
	 * it's pretty huge).
	 * 
	 * @param n
	 * @param stream
	 * @return array of observations
	 */
	public double[] simulateRuns(int n, RandomStream stream) {
		double[] observations = new double[n];
		for (int i = 0; i < n; i++) {
			generatePath(stream);
			observations[i] = getPayoff();
		}
		stream.resetStartSubstream();
		return observations;
	}

	/**
	 * simulate one run, using the stream.
	 * 
	 * @param stream
	 * @return observation
	 */
	public double simulateOneRun(RandomStream stream) {
		generatePath(stream);
		return getPayoff();
	}

	/**
	 * simulate one run, using a fixed stream.
	 * 
	 * @param fixedStream
	 * @return
	 */
	public double simulateOneRunFixed(double[] fixedStream) {
		generatePath(fixedStream);
		return getPayoff();
	}

	public static void main(String[] args) {
		int s = 12;

		// choose the observation times
		double[] observationTimes = new double[s + 1];
		observationTimes[0] = 0.0;
		for (int j = 1; j <= s; j++)
			observationTimes[j] = (double) j / (double) s;
		Asian process = new Asian(0.05, 0.5, 100.0, 100.0, s, observationTimes);
		Tally statValue = new Tally("Stats on value of Asian option");

		int n = 100000;
		process.simulateRuns(n, new MRG32k3a(), statValue);
		statValue.setConfidenceIntervalStudent();
		System.out.println(statValue.report(0.95, 3));
	}
}
